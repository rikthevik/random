#include "out.h"



void _DT_INIT(void)

{
  __gmon_start__();
  return;
}



void FUN_00102020(void)

{
                    // WARNING: Treating indirect jump as call
  (*(code *)(undefined *)0x0)();
  return;
}



void __cxa_finalize(void)

{
  __cxa_finalize();
  return;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

int sprintf(char *__s,char *__format,...)

{
  int iVar1;
  
  iVar1 = sprintf(__s,__format);
  return iVar1;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

void std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::c_str(void)

{
  c_str();
  return;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

void std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string
               (basic_string *param_1)

{
  basic_string(param_1);
  return;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

int memcmp(void *__s1,void *__s2,size_t __n)

{
  int iVar1;
  
  iVar1 = memcmp(__s1,__s2,__n);
  return iVar1;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

double difftime(time_t __time1,time_t __time0)

{
  double dVar1;
  
  dVar1 = difftime(__time1,__time0);
  return dVar1;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

void std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::end(void)

{
  end();
  return;
}



void __thiscall
std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string
          (basic_string<char,std::char_traits<char>,std::allocator<char>> *this)

{
  ~basic_string(this);
  return;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

tm * localtime(time_t *__timer)

{
  tm *ptVar1;
  
  ptVar1 = localtime(__timer);
  return ptVar1;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

uint sleep(uint __seconds)

{
  uint uVar1;
  
  uVar1 = sleep(__seconds);
  return uVar1;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

size_t strftime(char *__s,size_t __maxsize,char *__format,tm *__tp)

{
  size_t sVar1;
  
  sVar1 = strftime(__s,__maxsize,__format,__tp);
  return sVar1;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

void std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::begin(void)

{
  begin();
  return;
}



void __cxa_atexit(void)

{
  __cxa_atexit();
  return;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

time_t time(time_t *__timer)

{
  time_t tVar1;
  
  tVar1 = time(__timer);
  return tVar1;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

basic_ostream * std::operator<<(basic_ostream *param_1,char *param_2)

{
  basic_ostream *pbVar1;
  
  pbVar1 = operator<<(param_1,param_2);
  return pbVar1;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

void std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::substr
               (ulong param_1,ulong param_2)

{
  substr(param_1,param_2);
  return;
}



void __thiscall
std::basic_ostream<char,std::char_traits<char>>::operator<<
          (basic_ostream<char,std::char_traits<char>> *this,
          _func_basic_ostream_ptr_basic_ostream_ptr *param_1)

{
  operator<<(this,param_1);
  return;
}



void __thiscall std::allocator<char>::~allocator(allocator<char> *this)

{
  ~allocator(this);
  return;
}



void __stack_chk_fail(void)

{
                    // WARNING: Subroutine does not return
  __stack_chk_fail();
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

basic_istream * std::operator>>(basic_istream *param_1,basic_string *param_2)

{
  basic_istream *pbVar1;
  
  pbVar1 = operator>>(param_1,param_2);
  return pbVar1;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

void std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string
               (char *param_1,allocator *param_2)

{
  basic_string(param_1,param_2);
  return;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

void std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string
               (void)

{
  basic_string();
  return;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

void std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::length(void)

{
  length();
  return;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

uchar * MD5(uchar *d,size_t n,uchar *md)

{
  uchar *puVar1;
  
  puVar1 = MD5(d,n,md);
  return puVar1;
}



void __thiscall std::ios_base::Init::Init(Init *this)

{
  Init(this);
  return;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

int atoi(char *__nptr)

{
  int iVar1;
  
  iVar1 = atoi(__nptr);
  return iVar1;
}



void _Unwind_Resume(void)

{
                    // WARNING: Subroutine does not return
  _Unwind_Resume();
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

void std::allocator<char>::allocator(void)

{
  allocator();
  return;
}



void processEntry entry(undefined8 param_1,undefined8 param_2)

{
  undefined auStack_8 [8];
  
  __libc_start_main(FUN_00102943,param_2,&stack0x00000008,FUN_00102bf0,FUN_00102c60,param_1,
                    auStack_8);
  do {
                    // WARNING: Do nothing block with infinite loop
  } while( true );
}



// WARNING: Removing unreachable block (ram,0x001023e3)
// WARNING: Removing unreachable block (ram,0x001023ef)

void FUN_001023d0(void)

{
  return;
}



// WARNING: Removing unreachable block (ram,0x00102424)
// WARNING: Removing unreachable block (ram,0x00102430)

void FUN_00102400(void)

{
  return;
}



void _FINI_0(void)

{
  if (DAT_00105278 != '\0') {
    return;
  }
  __cxa_finalize(PTR_LOOP_00105008);
  FUN_001023d0();
  DAT_00105278 = 1;
  return;
}



void _INIT_0(void)

{
  FUN_00102400();
  return;
}



char FUN_00102489(ulong param_1)

{
  char cVar1;
  int iVar2;
  int iVar3;
  long lVar4;
  undefined *puVar5;
  char *pcVar6;
  long in_FS_OFFSET;
  char local_e2;
  int local_e0;
  int local_dc;
  time_t local_d0;
  undefined8 local_c8;
  undefined8 local_c0;
  void *local_b8;
  tm *local_b0;
  basic_string<char,std::char_traits<char>,std::allocator<char>> local_a8 [32];
  basic_string<char,std::char_traits<char>,std::allocator<char>> local_88 [38];
  uchar local_62 [10];
  byte local_58 [16];
  char local_48 [40];
  long local_20;
  
  local_20 = *(long *)(in_FS_OFFSET + 0x28);
  sleep(5);
  lVar4 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::length();
  if (lVar4 == 0xc) {
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::substr
              ((ulong)local_88,param_1);
    local_b8 = (void *)std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>
                       ::c_str();
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string
              (local_88);
    sleep(10);
    local_d0 = time((time_t *)0x0);
    local_b0 = localtime(&local_d0);
    strftime((char *)local_62,10,"%b",local_b0);
    sleep(5);
    MD5(local_62,3,local_58);
    sleep(6);
    for (local_e0 = 0; local_e0 < 0x10; local_e0 = local_e0 + 1) {
      sprintf(local_48 + local_e0 * 2,"%02x",(ulong)local_58[local_e0]);
    }
    iVar2 = memcmp(local_48,local_b8,3);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::substr
              ((ulong)local_a8,param_1);
    local_dc = 0;
    local_c8 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::begin()
    ;
    while( true ) {
      local_c0 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::end()
      ;
      cVar1 = FUN_00102b5b(&local_c8,&local_c0);
      if (cVar1 == '\0') break;
      puVar5 = (undefined *)FUN_00102bc0(&local_c8);
      local_c0 = CONCAT71(local_c0._1_7_,*puVar5);
      iVar3 = atoi((char *)&local_c0);
      local_dc = local_dc + iVar3;
      FUN_00102b9c(&local_c8);
    }
    if ((iVar2 == 0) && (local_dc == 0x17)) {
      local_e2 = '\x01';
    }
    else {
      local_e2 = '\0';
    }
                    // try { // try from 0010271b to 0010271f has its CatchHandler @ 0010280d
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::substr
              ((ulong)local_88,param_1);
    local_c8 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::begin()
    ;
    while( true ) {
      local_c0 = std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::end()
      ;
      cVar1 = FUN_00102b5b(&local_c8,&local_c0);
      if (cVar1 == '\0') break;
      pcVar6 = (char *)FUN_00102bc0(&local_c8);
      cVar1 = *pcVar6;
      if (((((cVar1 == 'a') || (cVar1 == 'x')) || (cVar1 == 'y')) ||
          ((cVar1 == 'l' || (cVar1 == 'o')))) && (local_e2 == '\x01')) {
        local_e2 = '\x01';
      }
      else {
        local_e2 = '\0';
      }
      FUN_00102b9c(&local_c8);
    }
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string
              (local_88);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string
              (local_a8);
  }
  else {
    local_e2 = '\0';
  }
  if (local_20 != *(long *)(in_FS_OFFSET + 0x28)) {
                    // WARNING: Subroutine does not return
    __stack_chk_fail();
  }
  return local_e2;
}



bool FUN_0010283d(void)

{
  long in_FS_OFFSET;
  allocator<char> local_61;
  time_t local_60;
  time_t local_58;
  double local_50;
  basic_string<char,std::char_traits<char>,std::allocator<char>> local_48 [40];
  long local_20;
  
  local_20 = *(long *)(in_FS_OFFSET + 0x28);
  local_60 = time((time_t *)0x0);
  std::allocator<char>::allocator();
                    // try { // try from 00102885 to 00102889 has its CatchHandler @ 00102919
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string
            ((char *)local_48,(allocator *)&DAT_00103011);
                    // try { // try from 00102891 to 00102895 has its CatchHandler @ 00102904
  FUN_00102489(local_48);
  std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string
            (local_48);
  std::allocator<char>::~allocator(&local_61);
  local_58 = time((time_t *)0x0);
  local_50 = difftime(local_58,local_60);
  if (local_20 != *(long *)(in_FS_OFFSET + 0x28)) {
                    // WARNING: Subroutine does not return
    __stack_chk_fail();
  }
  return 5.0 <= local_50;
}



undefined8 FUN_00102943(void)

{
  char cVar1;
  basic_ostream *pbVar2;
  long in_FS_OFFSET;
  basic_string local_68 [32];
  basic_string local_48 [40];
  long local_20;
  
  local_20 = *(long *)(in_FS_OFFSET + 0x28);
  cVar1 = FUN_0010283d();
  if (cVar1 == '\x01') {
    pbVar2 = std::operator<<((basic_ostream *)std::cout,
                             "Please enter your key to activate our super secret hax0r tool");
    std::basic_ostream<char,std::char_traits<char>>::operator<<
              ((basic_ostream<char,std::char_traits<char>> *)pbVar2,
               std::endl<char,std::char_traits<char>>);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string();
                    // try { // try from 00102a07 to 00102a1e has its CatchHandler @ 00102acb
    std::operator>>((basic_istream *)std::cin,local_68);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string
              (local_48);
                    // try { // try from 00102a26 to 00102a2a has its CatchHandler @ 00102ab6
    cVar1 = FUN_00102489(local_48);
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string
              ((basic_string<char,std::char_traits<char>,std::allocator<char>> *)local_48);
    if (cVar1 == '\0') {
      pbVar2 = std::operator<<((basic_ostream *)std::cout,"Incorrect try again");
      std::basic_ostream<char,std::char_traits<char>>::operator<<
                ((basic_ostream<char,std::char_traits<char>> *)pbVar2,
                 std::endl<char,std::char_traits<char>>);
    }
    else {
                    // try { // try from 00102a4e to 00102a91 has its CatchHandler @ 00102acb
      pbVar2 = std::operator<<((basic_ostream *)std::cout,
                               "Congrats you have activated our tool enjoy");
      std::basic_ostream<char,std::char_traits<char>>::operator<<
                ((basic_ostream<char,std::char_traits<char>> *)pbVar2,
                 std::endl<char,std::char_traits<char>>);
    }
    std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string
              ((basic_string<char,std::char_traits<char>,std::allocator<char>> *)local_68);
  }
  else {
    pbVar2 = std::operator<<((basic_ostream *)std::cout,"Tamper detected!!!!");
    std::basic_ostream<char,std::char_traits<char>>::operator<<
              ((basic_ostream<char,std::char_traits<char>> *)pbVar2,
               std::endl<char,std::char_traits<char>>);
    pbVar2 = std::operator<<((basic_ostream *)std::cout,"Please download a new binary");
    std::basic_ostream<char,std::char_traits<char>>::operator<<
              ((basic_ostream<char,std::char_traits<char>> *)pbVar2,
               std::endl<char,std::char_traits<char>>);
  }
  if (local_20 != *(long *)(in_FS_OFFSET + 0x28)) {
                    // WARNING: Subroutine does not return
    __stack_chk_fail();
  }
  return 0;
}



void FUN_00102af5(int param_1,int param_2)

{
  if ((param_1 == 1) && (param_2 == 0xffff)) {
    std::ios_base::Init::Init((Init *)&DAT_00105279);
    __cxa_atexit(std::ios_base::Init::~Init,&DAT_00105279,&PTR_LOOP_00105008);
  }
  return;
}



void _INIT_1(void)

{
  FUN_00102af5(1,0xffff);
  return;
}



undefined8 FUN_00102b5b(undefined8 param_1,undefined8 param_2)

{
  long lVar1;
  long *plVar2;
  
  plVar2 = (long *)FUN_00102bd6(param_1);
  lVar1 = *plVar2;
  plVar2 = (long *)FUN_00102bd6(param_2);
  return CONCAT71((int7)((ulong)*plVar2 >> 8),lVar1 != *plVar2);
}



long * FUN_00102b9c(long *param_1)

{
  *param_1 = *param_1 + 1;
  return param_1;
}



undefined8 FUN_00102bc0(undefined8 *param_1)

{
  return *param_1;
}



undefined8 FUN_00102bd6(undefined8 param_1)

{
  return param_1;
}



void FUN_00102bf0(undefined4 param_1,undefined8 param_2,undefined8 param_3)

{
  long lVar1;
  
  _DT_INIT();
  lVar1 = 0;
  do {
    (*(code *)(&__DT_INIT_ARRAY)[lVar1])(param_1,param_2,param_3);
    lVar1 = lVar1 + 1;
  } while (lVar1 != 2);
  return;
}



void FUN_00102c60(void)

{
  return;
}



void _DT_FINI(void)

{
  return;
}




