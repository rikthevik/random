void _init()
{
    if (__gmon_start__ != 0)
        __gmon_start__();
}

int64_t sub_2020()
{
    int64_t var_8 = 0;
    /* jump -> nullptr */
}

int64_t sub_2030()
{
    int64_t var_8 = 0;
    /* tailcall */
    return sub_2020();
}

int64_t sub_2040()
{
    int64_t var_8 = 1;
    /* tailcall */
    return sub_2020();
}

int64_t sub_2050()
{
    int64_t var_8 = 2;
    /* tailcall */
    return sub_2020();
}

int64_t sub_2060()
{
    int64_t var_8 = 3;
    /* tailcall */
    return sub_2020();
}

int64_t sub_2070()
{
    int64_t var_8 = 4;
    /* tailcall */
    return sub_2020();
}

int64_t sub_2080()
{
    int64_t var_8 = 5;
    /* tailcall */
    return sub_2020();
}

int64_t sub_2090()
{
    int64_t var_8 = 6;
    /* tailcall */
    return sub_2020();
}

int64_t sub_20a0()
{
    int64_t var_8 = 7;
    /* tailcall */
    return sub_2020();
}

int64_t sub_20b0()
{
    int64_t var_8 = 8;
    /* tailcall */
    return sub_2020();
}

int64_t sub_20c0()
{
    int64_t var_8 = 9;
    /* tailcall */
    return sub_2020();
}

int64_t sub_20d0()
{
    int64_t var_8 = 0xa;
    /* tailcall */
    return sub_2020();
}

int64_t sub_20e0()
{
    int64_t var_8 = 0xb;
    /* tailcall */
    return sub_2020();
}

int64_t sub_20f0()
{
    int64_t var_8 = 0xc;
    /* tailcall */
    return sub_2020();
}

int64_t sub_2100()
{
    int64_t var_8 = 0xd;
    /* tailcall */
    return sub_2020();
}

int64_t sub_2110()
{
    int64_t var_8 = 0xe;
    /* tailcall */
    return sub_2020();
}

int64_t sub_2120()
{
    int64_t var_8 = 0xf;
    /* tailcall */
    return sub_2020();
}

int64_t sub_2130()
{
    int64_t var_8 = 0x10;
    /* tailcall */
    return sub_2020();
}

int64_t sub_2140()
{
    int64_t var_8 = 0x11;
    /* tailcall */
    return sub_2020();
}

int64_t sub_2150()
{
    int64_t var_8 = 0x12;
    /* tailcall */
    return sub_2020();
}

int64_t sub_2160()
{
    int64_t var_8 = 0x13;
    /* tailcall */
    return sub_2020();
}

int64_t sub_2170()
{
    int64_t var_8 = 0x14;
    /* tailcall */
    return sub_2020();
}

int64_t sub_2180()
{
    int64_t var_8 = 0x15;
    /* tailcall */
    return sub_2020();
}

int64_t sub_2190()
{
    int64_t var_8 = 0x16;
    /* tailcall */
    return sub_2020();
}

int64_t sub_21a0()
{
    int64_t var_8 = 0x17;
    /* tailcall */
    return sub_2020();
}

int64_t sub_21b0()
{
    int64_t var_8 = 0x18;
    /* tailcall */
    return sub_2020();
}

int64_t sub_21c0()
{
    int64_t var_8 = 0x19;
    /* tailcall */
    return sub_2020();
}

int64_t sub_21d0()
{
    int64_t var_8 = 0x1a;
    /* tailcall */
    return sub_2020();
}

void __cxa_finalize(void* d)
{
    /* tailcall */
    return __cxa_finalize(d);
}

int32_t sprintf(char* s, char const* format, ...)
{
    /* tailcall */
    return sprintf();
}

char const* std::string::c_str(class std::string* const this)
{
    /* tailcall */
    return std::string::c_str(this);
}

void std::string::string(class std::string* const this)
{
    /* tailcall */
    return std::string::string(this);
}

int32_t memcmp(void const* arg1, void const* arg2, uint64_t arg3)
{
    /* tailcall */
    return memcmp(arg1, arg2, arg3);
}

double difftime(time_t time1, time_t time0)
{
    /* tailcall */
    return difftime(time1, time0);
}

std::string::iterator std::string::end(class std::string* const this)
{
    /* tailcall */
    return std::string::end(this);
}

void std::string::~string(class std::string* const this)
{
    /* tailcall */
    return std::string::~string(this);
}

struct tm* localtime(time_t* t)
{
    /* tailcall */
    return localtime(t);
}

uint32_t sleep(uint32_t seconds)
{
    /* tailcall */
    return sleep(seconds);
}

uint64_t strftime(char* s, uint64_t maxsize, char const* format, struct tm* tp)
{
    /* tailcall */
    return strftime(s, maxsize, format, tp);
}

std::string::iterator std::string::begin(class std::string* const this)
{
    /* tailcall */
    return std::string::begin(this);
}

int32_t __cxa_atexit(void (* func)(void* retval), void* arg, void* dso_handle)
{
    /* tailcall */
    return __cxa_atexit(func, arg, dso_handle);
}

time_t time(time_t* arg1)
{
    /* tailcall */
    return time(arg1);
}

class std::ostream& std::operator<<<std::char_traits<char> >(class std::ostream& __out, char const* __s)
{
    /* tailcall */
    return std::operator<<<std::char_traits<char> >(__out, __s);
}

class std::string std::string::substr(std::(anonymous namespace)::range<char, true>* arg1, class std::string* const this, std::string::size_type __pos, std::string::size_type __n)
{
    /* tailcall */
    return std::string::substr(arg1, this, __pos, __n);
}

std::ostream::__ostream_type* std::ostream::operator<<(class std::ostream* const this, std::ostream::__ostream_type& (* __pf)(std::ostream::__ostream_type&))
{
    /* tailcall */
    return std::ostream::operator<<(this, __pf);
}

void std::allocator<char>::~allocator(class std::allocator<char>* const this)
{
    /* tailcall */
    return std::allocator<char>::~allocator(this);
}

void __stack_chk_fail() __noreturn
{
    /* tailcall */
    return __stack_chk_fail();
}

class std::istream& std::operator>><char>(class std::istream& __in, class std::string& __str)
{
    /* tailcall */
    return std::operator>><char>(__in, __str);
}

void std::string::string(class std::string* const this, char const* __s)
{
    /* tailcall */
    return std::string::string(this, __s);
}

void std::string::string(class std::string* const this)
{
    /* tailcall */
    return std::string::string(this);
}

std::string::size_type std::string::length(class std::string* const this)
{
    /* tailcall */
    return std::string::length(this);
}

int64_t MD5()
{
    /* tailcall */
    return MD5();
}

void std::ios_base::Init::Init(class std::ios_base::Init* const this)
{
    /* tailcall */
    return std::ios_base::Init::Init(this);
}

int32_t atoi(char const* nptr)
{
    /* tailcall */
    return atoi(nptr);
}

void _Unwind_Resume(struct _Unwind_Exception* exc) __noreturn
{
    /* tailcall */
    return _Unwind_Resume(exc);
}

void std::allocator<char>::allocator(class std::allocator<char>* const this)
{
    /* tailcall */
    return std::allocator<char>::allocator(this);
}

void _start(int64_t arg1, int64_t arg2, void (* arg3)()) __noreturn
{
    int64_t stack_end_1;
    int64_t stack_end = stack_end_1;
    __libc_start_main(main, __return_addr, &ubp_av, init, fini, arg3, &stack_end);
    /* no return */
}

void deregister_tm_clones()
{
    return;
}

void sub_2400()
{
    return;
}

void _FINI_0()
{
    if (data_5278 != 0)
        return;
    
    if (__cxa_finalize != 0)
        __cxa_finalize(data_5008);
    
    deregister_tm_clones();
    data_5278 = 1;
}

void _INIT_0()
{
    /* tailcall */
    return sub_2400();
}

uint64_t sub_2489(class std::string* arg1)
{
    void* fsbase;
    int64_t rax = *(fsbase + 0x28);
    sleep(5);
    std::string::size_type rax_3;
    rax_3 = std::string::length(arg1) != 0xc;
    uint32_t rbx;
    
    if (rax_3 == 0)
    {
        char var_e2_1 = 0;
        std::(anonymous namespace)::range<char, true> var_88;
        std::string::substr(&var_88, arg1, 0, 3);
        char* rax_4 = std::string::c_str(&var_88);
        std::string::~string(&var_88);
        sleep(0xa);
        time_t t = time(nullptr);
        void s;
        strftime(&s, 0xa, &data_3009, localtime(&t));
        sleep(5);
        void var_58;
        MD5(&s, 3, &var_58);
        sleep(6);
        void var_48;
        
        for (int32_t i = 0; i <= 0xf; i += 1)
            sprintf((&var_48 + (i * 2)), "%02x", *(&var_58 + i));
        
        if (memcmp(&var_48, rax_4, 3) == 0)
            var_e2_1 = 1;
        
        std::(anonymous namespace)::range<char, true> var_a8;
        std::string::substr(&var_a8, arg1, 3, 5);
        int32_t var_dc_1 = 0;
        std::string::iterator var_c8 = std::string::begin(&var_a8);
        std::string::iterator nptr;
        
        while (true)
        {
            nptr = std::string::end(&var_a8);
            
            if (sub_2b5b(&var_c8, &nptr) == 0)
                break;
            
            nptr._M_current = *sub_2bc0(&var_c8);
            var_dc_1 += atoi(&nptr);
            sub_2b9c(&var_c8);
        }
        
        char var_e2_2;
        
        if ((var_e2_1 != 1 || var_dc_1 != 0x17))
            var_e2_2 = 0;
        else
            var_e2_2 = 1;
        
        std::string::substr(&var_88, arg1, 9, 4);
        var_c8 = std::string::begin(&var_88);
        
        while (true)
        {
            nptr = std::string::end(&var_88);
            
            if (sub_2b5b(&var_c8, &nptr) == 0)
                break;
            
            char rax_25 = *sub_2bc0(&var_c8);
            
            if ((((rax_25 == 0x61 || rax_25 == 0x78) || rax_25 == 0x79) || rax_25 == 0x6c))
            {
                if (var_e2_2 != 1)
                    var_e2_2 = 0;
                else
                    var_e2_2 = 1;
            }
            else if ((rax_25 != 0x6f || var_e2_2 != 1))
                var_e2_2 = 0;
            else
                var_e2_2 = 1;
            
            sub_2b9c(&var_c8);
        }
        
        rbx = var_e2_2;
        std::string::~string(&var_88);
        std::string::~string(&var_a8);
    }
    else
        rbx = 0;
    
    if (rax == *(fsbase + 0x28))
        return rbx;
    
    __stack_chk_fail();
    /* no return */
}

void sub_280d(struct _Unwind_Exception* arg1 @ rax, void* arg2 @ rbp) __noreturn
{
    std::string::~string((arg2 - 0xa0));
    _Unwind_Resume(arg1);
    /* no return */
}

int64_t sub_283d()
{
    void* fsbase;
    int64_t rax = *(fsbase + 0x28);
    time_t time0 = time(nullptr);
    void var_61;
    std::allocator<char>::allocator(&var_61);
    void var_48;
    std::string::string(&var_48, &data_3011);
    sub_2489(&var_48);
    std::string::~string(&var_48);
    std::allocator<char>::~allocator(&var_61);
    int64_t result;
    
    if (5.0 <= difftime(time(nullptr), time0))
        result = 1;
    else
        result = 0;
    
    if (rax == *(fsbase + 0x28))
        return result;
    
    __stack_chk_fail();
    /* no return */
}

void sub_2904(struct _Unwind_Exception* arg1 @ rax, void* arg2 @ rbp) __noreturn
{
    std::string::~string((arg2 - 0x40));
    std::allocator<char>::~allocator((arg2 - 0x59));
    _Unwind_Resume(arg1);
    /* no return */
}

void sub_2919(struct _Unwind_Exception* arg1 @ rax, void* arg2 @ rbp) __noreturn
{
    std::allocator<char>::~allocator((arg2 - 0x59));
    _Unwind_Resume(arg1);
    /* no return */
}

int32_t main(int32_t argc, char** argv, char** envp)
{
    void* fsbase;
    int64_t rax = *(fsbase + 0x28);
    
    if (sub_283d() == 1)
    {
        std::ostream::operator<<(std::operator<<<std::char_traits<char> >(&std::cout, "Please enter your key to activat…"), std::endl<char>);
        void __str;
        std::string::string(&__str);
        std::operator>><char>(&std::cin, &__str);
        void var_48;
        std::string::string(&var_48);
        char rax_7 = sub_2489(&var_48);
        std::string::~string(&var_48);
        
        if (rax_7 == 0)
            std::ostream::operator<<(std::operator<<<std::char_traits<char> >(&std::cout, "Incorrect try again"), std::endl<char>);
        else
            std::ostream::operator<<(std::operator<<<std::char_traits<char> >(&std::cout, "Congrats you have activated our …"), std::endl<char>);
        
        std::string::~string(&__str);
    }
    else
    {
        std::ostream::operator<<(std::operator<<<std::char_traits<char> >(&std::cout, "Tamper detected!!!!"), std::endl<char>);
        std::ostream::operator<<(std::operator<<<std::char_traits<char> >(&std::cout, "Please download a new binary"), std::endl<char>);
    }
    
    if (rax == *(fsbase + 0x28))
        return 0;
    
    __stack_chk_fail();
    /* no return */
}

void sub_2ab6(struct _Unwind_Exception* arg1 @ rax, void* arg2 @ rbp) __noreturn
{
    std::string::~string((arg2 - 0x40));
    std::string::~string((arg2 - 0x60));
    _Unwind_Resume(arg1);
    /* no return */
}

void sub_2acb(struct _Unwind_Exception* arg1 @ rax, void* arg2 @ rbp) __noreturn
{
    std::string::~string((arg2 - 0x60));
    _Unwind_Resume(arg1);
    /* no return */
}

void sub_2af5(int32_t arg1, int32_t arg2)
{
    if ((arg1 == 1 && arg2 == 0xffff))
    {
        std::ios_base::Init::Init(&data_5279);
        __cxa_atexit(std::ios_base::Init::~Init, &data_5279, &data_5008);
    }
}

int64_t _INIT_1()
{
    return sub_2af5(1, 0xffff);
}

int64_t sub_2b5b(int64_t arg1, int64_t arg2)
{
    int64_t result;
    result = *sub_2bd6(arg1) != *sub_2bd6(arg2);
    return result;
}

int64_t* sub_2b9c(int64_t* arg1)
{
    *arg1 += 1;
    return arg1;
}

int64_t sub_2bc0(int64_t* arg1)
{
    return *arg1;
}

int64_t sub_2bd6(int64_t arg1) __pure
{
    return arg1;
}

void init()
{
    _init();
    int64_t i = 0;
    
    do
    {
        int64_t rdx;
        int64_t rsi;
        int32_t rdi;
        init_array[i](rdi, rsi, rdx);
        i += 1;
    } while (2 != i);
}

void fini() __pure
{
    return;
}

int64_t _fini() __pure
{
    return;
}


